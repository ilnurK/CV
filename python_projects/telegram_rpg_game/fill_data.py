"""The script fill database tables

Script requires tables to link the specified data with ORM models,
Session - to add data to the correct PostgreSQL session,
character_classes - to select the correct class identifier, quest kinds
and item boost parameters, logging - to handle with mistakes
"""

import tables as t
from sqlalchemy.orm import Session  # type: ignore
from character_classes import INIT_HP, ClassID, QuestKind, ItemBuff
import logging
from typing import List, Any, Optional
from argparse import Namespace


def fill_database(session: Session, args: Optional[Namespace]) -> None:
    """Fill databases with start values

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[argparse.Namespace]
        The command line arguments
    """

    fill_saves(session, args)
    fill_classes(session, args)
    fill_persons(session, args)
    fill_items(session, args)
    fill_weapons(session, args)

    def get_range(name_1: str, name_2: str, type: str) -> range:
        """Getting a range of ids for a specific game class

        Parameters
        ----------
        name_1: str
            Name of the first representative in the range
        name_2: str
            Name of the last representative in the range
        type: str
            Specific game class name
        """

        part_1: Optional[t.Person] = None
        part_2: Optional[t.Person] = None
        part_1 = session.query(t.Person).filter_by(name=name_1).first()
        part_2 = session.query(t.Person).filter_by(name=name_2).first()
        type_range = range(1)
        if part_1 and part_2 and part_1.id and part_2.id:
            type_range = range(int(part_1.id), int(part_2.id))
            logging.info(f"{type} range {type_range}")
        else:
            logging.info(f"{type} range query incorrect")
        return type_range

    name_start: str = "–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤"
    name_end: str = "–ê–ª—å—Ñ—Ä–µ–¥–æ –¥–∏ –°—Ç–µ—Ñ–∞–Ω–æ"
    civils_id: range = get_range(name_start, name_end, "civils")

    name_start = "–î–µ–Ω–∏—Å –†–∏—á—á–∏"
    name_end = "–í–ª–∞–¥–∏–º–∏—Ä –ú–∞—Ä—Ç–∏–Ω–∏"
    condattieri_id: range = get_range(name_start, name_end, "condottieri")

    name_start = "–ê—Ö–º–µ–¥ –§–ª–æ–π–¥"
    name_end = "–°—É–ª–µ–π–º–∞–Ω –õ–∏–Ω—á"
    corsairs_id: range = get_range(name_start, name_end, "corsairs")

    fill_persons_items(session, args, civils_id, condattieri_id, corsairs_id)
    fill_persons_weapons(session, args)
    fill_quests(session, args)
    fill_persons_quests(session, args)


def fill_saves(session: Session, args: Optional[Namespace]) -> None:
    """Fill classes table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[Namespace]
        The command line arguments
    """

    saves = [t.Save(id=1, description="–ù–æ–≤–∞—è –∏–≥—Ä–∞ | SAVE ID 1", time=0)]
    args_handle(session, args, t.Save, saves)
    if (args and not args.correct) or not args:
        session.add_all(saves)
    session.commit()


def args_handle(
    session: Session, args: Optional[Namespace], table: Any, lst: List[Any]
) -> None:
    """Appends or corrects data in PostgreSQL db without deleting

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[Namespace]
        The command line argument
    table : Any
        Any table type
    lst : List[Any]
        List of any ORM models
    """

    recs: List[Any] = []
    SID: int = 1
    if args and (args.correct or args.append):
        if hasattr(table, "save_id"):
            recs = session.query(table).filter_by(save_id=SID).all()
        else:
            recs = session.query(table).all()

    remove_items: List[Any] = []
    if args and args.append:
        compare: List[Any] = [get_compare_elem(table, r) for r in recs]
        for item in lst:
            if get_compare_elem(table, item) in compare:
                remove_items.append(item)

    for item in remove_items:
        lst.remove(item)

    if args and args.correct:
        i: int = 0
        j: int = 0
        len_i: int = len(lst)
        len_j: int = len(recs)
        while i < len_i:
            if j < len_j and (
                get_compare_elem(table, recs[j])
                == get_compare_elem(table, lst[i])
            ):
                for attr, value in lst[i].__dict__.items():
                    if (
                        not attr.startswith("_sa")
                        and attr != "id"
                        and getattr(lst[i], attr) != getattr(recs[j], attr)
                    ):
                        setattr(recs[j], attr, value)
                j = len_j
            else:
                j += 1
            if j >= len_j:
                i += 1
                j = 0


def get_compare_elem(table: Any, elem: Any) -> Any:
    """Gets ORM model's comparator

    Parameters
    ----------
    table : Any
        Any table type
    elem : Any
        Any ORM model
    """

    cmp_elem: Any = 0
    if table == t.Quest:
        cmp_elem = elem.class_id, elem.description
    elif table == t.Person:
        cmp_elem = elem.name
    elif table == t.Person_Item:
        cmp_elem = elem.person_id, elem.item_id
    elif table == t.Person_Weapon:
        cmp_elem = elem.person_id, elem.weapon_id
    elif table == t.Person_Quest:
        cmp_elem = elem.person_id, elem.quest_id
    elif table == t.Item:
        cmp_elem = elem.name, elem.is_tradable
    else:
        cmp_elem = elem.id
    return cmp_elem


def fill_classes(session: Session, args: Optional[Namespace]) -> None:
    """Fill classes table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[Namespace]
        The command line argument
    """

    lst = [
        t.Class(id=ClassID.CIVIL, name="–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"),
        t.Class(id=ClassID.CONDOTR, name="–ö–æ–Ω–¥–æ—Ç—å–µ—Ä"),
        t.Class(id=ClassID.CORSAIR, name="–ö–æ—Ä—Å–∞—Ä"),
    ]

    args_handle(session, args, t.Class, lst)
    if (args and not args.correct) or not args:
        session.add_all(lst)
    session.commit()


def fill_persons(session: Session, args: Optional[Namespace]) -> None:
    """Fill persons table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[Namespace]
        The command line argument
    """

    persons: List[t.Person] = []
    SID: int = 1
    ID: int = 1

    def add_person(
        cid: ClassID, ico: str, name: str, lvl: int, lid: int, pos: List[int]
    ) -> t.Person:
        """Append person to persons ORM list

        Parameters
        ----------
        cid: ClassID
            The person's ClassID
        ico: str
            The person's appearance
        name: str
            The person's name
        lvl: int
            The person's level
        lid: int
            The person's start location ID
        pos: List[int]
            The person's position

        Returns
        -------
        t.Person
            Created person
        """

        nonlocal ID
        person = t.Person(
            id=str(ID), class_id=cid, save_id=SID, appearance=ico
        )
        ID += 1
        person.name = name
        person.level = lvl
        person.location_id = lid
        person._Person__pos = pos  # type: ignore
        person.hp = INIT_HP + lvl * 5 if INIT_HP else lvl * 5
        return person

    def add_special_weapon_armor(weapon=None, armor=None):
        """Add specific weapon and/or armor for unique person

        Parameters
        ----------
        weapon : str, optional
            The person's weapon
        armor : str, optional, by default None
            The person's armor, by default None
        """

        if persons:
            person = persons[-1]
            if weapon:
                person.weapon = weapon
            if armor:
                person.armor = armor

    def add_civ(
        name: str, lvl: int, lid: int, pos: List[int], ico="üôé‚Äç‚ôÇÔ∏è"
    ) -> None:
        """Append civil to persons ORM list

        Parameters
        ----------
        name: str
            The person's name
        lvl: int
            The person's level
        lid: int
            The person's start location ID
        pos: List[int]
            The person's position
        ico: str
            The person's appearance
        """

        person: t.Person = add_person(ClassID.CIVIL, ico, name, lvl, lid, pos)
        person.weapon = "–ö—É–ª–∞–∫–∏"
        person.armor = "–õ—å–Ω—è–Ω–∞—è —Ä—É–±–∞—à–∫–∞"
        persons.append(person)

    # SORT BY LOCATION ID
    add_civ(name="–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", lvl=1, lid=1, pos=[3, 2])
    add_special_weapon_armor(weapon="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏")
    add_civ(name="–î–∏–¥—å–µ –î–µ—à–∞–º", lvl=4, lid=1, pos=[14, 16])
    add_special_weapon_armor(weapon="–ö–æ—Ä—Ç–∏–∫")

    add_civ(name="–ê–ª—å–±–µ—Ä—Ç–æ –°–∏–Ω–∏—á–∫–∏–Ω", lvl=2, lid=2, pos=[12, 13])
    add_special_weapon_armor(weapon="–ö–æ—Ä—Ç–∏–∫")
    add_civ(name="–ê–Ω–¥—Ä–µ–∞ –ü–∏—Ä–ª–æ", lvl=1, lid=2, pos=[4, 3])

    add_civ(name="–ù–∏–∫–∫–æ–ª–æ –†–æ–º–∞–Ω–æ–≤", lvl=3, lid=3, pos=[1, 3])
    add_special_weapon_armor(weapon="–ö–æ—Ä—Ç–∏–∫")
    add_civ(name="–ê–Ω—Ç–æ–Ω–∏–æ –ú–∞—Ä–≥–∞—Ä–µ—Ç—Ç–∏", lvl=1, lid=3, pos=[6, 5])

    add_civ(name="–ú–∞—Å—Å–∏–º–æ –ò–≤–∞–Ω–æ–≤", lvl=4, lid=4, pos=[1, 21])
    add_civ(name="–î–æ–º–∏–Ω–∏–∫ –¥–µ –ö–æ–∫–∫–æ", lvl=1, lid=4, pos=[7, 6])

    add_civ(name="–§—Ä–∞–Ω—á–µ—Å–∫–æ –ì–æ—Ä–ª–æ–º–∏", lvl=2, lid=5, pos=[17, 0])
    add_civ(name="–î–∂–∞–∫–æ–º–æ –•–∞–º–∞—Ç–¥–∏–Ω–æ–≤", lvl=4, lid=5, pos=[9, 4])
    add_special_weapon_armor(weapon="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏")

    add_civ(name="–ú–∞—Ç—Ç–µ–æ –¢–∞–ø–æ—á–∫–∏–Ω", lvl=10, lid=6, pos=[7, 16], ico="ü§¥")
    add_special_weapon_armor(weapon="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏")
    add_civ(name="–õ–µ–æ–Ω–∞—Ä–¥–æ –ú–∞–∫–∞—Ä–æ–≤", lvl=3, lid=6, pos=[13, 15])
    add_special_weapon_armor(weapon="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏")

    add_civ(name="–ú–∞—Ç–µ–æ –ö–æ–≤–∞—á–∏—á", lvl=1, lid=7, pos=[8, 1])
    add_civ(name="–ö—Ä–∏—Å—Ç–∏–∞–Ω –•–∞—Ä–∏–æ–Ω–æ–≤", lvl=4, lid=7, pos=[11, 3])

    add_civ(name="–û–ª–µ–≥–æ—Å –õ–æ–±–∞–Ω–æ–≤—Å–∫–∏", lvl=1, lid=8, pos=[8, 1])
    add_civ(name="–§—Ä–∞–Ω—á–µ–∫—Å–æ –°–æ–±–æ–ª–µ–≤", lvl=4, lid=8, pos=[5, 16])

    add_civ(name="–†–æ–±–µ—Ä—Ç–æ –°—Ç–µ—á–∫–∏–Ω", lvl=4, lid=9, pos=[4, 3])
    add_special_weapon_armor(weapon="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏")

    add_civ(name="–ö—Ä–∏—Å—Ç–æ—Ñ—Ñ –í–∞–ª—å—Ü", lvl=2, lid=10, pos=[13, 9])

    add_civ(name="–î–∂–∞–Ω–∫–∞—Ä–ª–æ –≠—Å–ø–æ–∑–∏—Ç–æ", lvl=3, lid=11, pos=[15, 1])
    add_special_weapon_armor(weapon="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏")

    add_civ(name="–ê–±—Ä–∏–≥–∞–¥–æ –¢–æ–±–∞–∫–∫–æ", lvl=2, lid=12, pos=[19, 1])

    add_civ(name="–ê–ª—å—Ñ—Ä–µ–¥–æ –¥–∏ –°—Ç–µ—Ñ–∞–Ω–æ", lvl=1, lid=13, pos=[3, 2])

    def add_con(
        name: str, lvl: int, lid: int, pos: List[int], ico="üíÇüèº"
    ) -> None:
        """Append condottier to persons ORM list

        Parameters
        ----------
        name: str
            The person's name
        lvl: int
            The person's level
        lid: int
            The person's start location ID
        pos: List[int]
            The person's position
        ico: str
            The person's appearance
        """

        pers: t.Person = add_person(ClassID.CONDOTR, ico, name, lvl, lid, pos)
        pers.weapon = "–°–∞–±–ª—è"
        pers.armor = "–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫"
        persons.append(pers)

    add_con(name="–î–µ–Ω–∏—Å –†–∏—á—á–∏", lvl=3, lid=1, pos=[4, 13])
    add_con(name="–ò–ª—å–Ω—É—Ä –ö–æ—Å—Ç–∞", lvl=3, lid=1, pos=[13, 20])

    add_con(name="–§—Ä–∞–Ω—á–µ—Å–∫–æ –¢–æ—Ç—Ç–∏", lvl=2, lid=2, pos=[8, 15])
    add_con(name="–í–∏–Ω—Å–µ–Ω—Ç –≤–∞–Ω –ì–æ–≥", lvl=3, lid=2, pos=[15, 4])

    add_con(name="–ï–≤–ø–∞—Ç–∏–π –ö–æ–ª–æ–≤—Ä–∞—Ç", lvl=4, lid=3, pos=[7, 14])
    add_con(name="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –†–æ—Å—Å–∏", lvl=2, lid=3, pos=[2, 7])

    add_con(name="–Ø—Ä–æ–º–∏—Ä –ú–µ–Ω–¥–µ–ª—å—Å–æ–Ω", lvl=2, lid=4, pos=[0, 15])
    add_con(name="–§–µ–¥–æ—Ä –§–∞–±—Ä–∏—Ü–∏", lvl=4, lid=4, pos=[7, 9])

    add_con(name="–õ–µ–æ–Ω–∏–¥ –õ—É–∫–∫–µ–∑–∏", lvl=4, lid=5, pos=[11, 15])
    add_con(name="–ò–≤–∞–Ω –ú–µ–¥–∏—á–∏", lvl=1, lid=5, pos=[16, 12])

    add_con(name="–°–æ—Å–∫–µ –ê–π–¥–∑–µ–Ω", lvl=4, lid=6, pos=[16, 5])
    add_special_weapon_armor(weapon="–†—É–∂—å–µ")
    add_con(name="–î–∂–∞–Ω–ª—É–∏–¥–∂–∏ –ë—É—Ñ—Ñ–æ–Ω", lvl=2, lid=6, pos=[12, 8])
    add_special_weapon_armor(weapon="–†—É–∂—å–µ")
    add_con(name="–ö–ª–∞—É–¥–∏–æ –†–∞–Ω—å–µ—Ä–∏", lvl=1, lid=6, pos=[3, 3])
    add_special_weapon_armor(weapon="–†—É–∂—å–µ")

    add_con(name="–°–µ–≤–µ—Ä—É—Å –°–Ω–µ–π–ø", lvl=2, lid=7, pos=[19, 1])

    add_con(name="–ú–∞—Ä–∫–æ –†–æ–π—Å", lvl=2, lid=8, pos=[8, 8])

    add_con(name="–ú–∞—Å–∫–∞—Ä–ø–æ–Ω–µ –ü–∞–ª–∞—Ü—Ü–æ", lvl=4, lid=10, pos=[16, 1])
    add_con(name="–†—É—Å–ª–∞–Ω –¥–∞ –°–∞–Ω –°–µ–≤–µ—Ä–∏–Ω–æ", lvl=2, lid=10, pos=[9, 13])

    add_con(name="–ú–∞—Å—Å–∏–º–∏–ª–∏–∞–Ω–æ –ê–ª–ª–µ–≥—Ä–∏", lvl=1, lid=11, pos=[16, 9])
    add_con(name="–ù–∏–∫–æ–ª–∞–π –°—Ñ–æ—Ä—Ü–∞", lvl=2, lid=11, pos=[5, 7])

    add_con(name="–û–ª–µ–≥ –ü–∞–ª—å–º–µ—Ä–∏", lvl=4, lid=12, pos=[5, 8])

    add_con(name="–ö–µ–Ω–ø–∞—á–∏ –î–∑–∞—Ä–∞–∫–∏", lvl=3, lid=13, pos=[9, 20])
    add_con(name="–í–ª–∞–¥–∏–º–∏—Ä –ú–∞—Ä—Ç–∏–Ω–∏", lvl=4, lid=13, pos=[12, 5])

    def add_cor(name: str, lvl: int, lid: int, pos: List[int], ico="üë≥üèº‚Äç‚ôÇÔ∏è"):
        """Append corsair to persons ORM list

        Parameters
        ----------
        name: str
            The person's name
        lvl: int
            The person's level
        lid: int
            The person's start location ID
        pos: List[int]
            The person's position
        ico: str
            The person's appearance
        """

        pers: t.Person = add_person(ClassID.CORSAIR, ico, name, lvl, lid, pos)
        pers.weapon = "–¢–æ–ø–æ—Ä"
        pers.armor = "–ö–æ–∂–∞–Ω—ã–π –∫–∞–º–∑–æ–ª"
        persons.append(pers)

    add_cor(name="–ê—Ö–º–µ–¥ –§–ª–æ–π–¥", lvl=3, lid=1, pos=[16, 10])
    add_cor(name="–•–æ–±—É—Ç—É—Å –ü–ª—É—Ç–æ–≤–∏—á", lvl=1, lid=1, pos=[3, 25])

    add_cor(name="–¢–µ—Ä–µ–∑ –ú–µ–π", lvl=4, lid=2, pos=[17, 20])

    add_cor(name="–ñ–æ–∑–µ –ú–æ—É—Ä–∏–Ω—å–æ", lvl=2, lid=3, pos=[14, 10])

    add_cor(name="–ì–µ–Ω—Ä–∏—Ö V", lvl=4, lid=4, pos=[15, 12])
    add_cor(name="–ñ–∞–Ω –ü—å–µ—Ä", lvl=1, lid=4, pos=[10, 3])

    add_cor(name="–ú–µ—Å—É—Ç –û–∑–∏–ª", lvl=1, lid=5, pos=[0, 3])
    add_cor(name="–ê–ª–∏ –ö–ª–∞–π–¥", lvl=2, lid=5, pos=[1, 6])

    add_cor(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", lvl=4, lid=7, pos=[13, 13])
    add_cor(name="–î–∂–∞–º–∞–ª –ö–æ—Ä–ª–µ–æ–Ω–µ", lvl=2, lid=7, pos=[7, 7])

    add_cor(name="–ú—É—Å—Ç–∞—Ñ–∞ –†–æ–º–∞–Ω–æ", lvl=3, lid=8, pos=[16, 3])
    add_cor(name="–ì–≤–∏–¥–æ –ú–∏—Å—Ç–∞", lvl=3, lid=8, pos=[16, 11])

    add_cor(name="–ú–∞—Ä—Ç–∏–Ω –õ—é—Ç–µ—Ä", lvl=2, lid=9, pos=[15, 13])
    add_cor(name="–ö–∞—Ä–∏–º –ö–∞—Å—Ç–∏–ª–∏—è", lvl=3, lid=9, pos=[7, 12])
    add_cor(name="–°–∞–ª–∏–º –í–æ—Ä–æ–±–µ–π", lvl=4, lid=9, pos=[7, 14])
    add_cor(name="–î–æ–ø–ø–∏–æ –î—å—è–≤–æ–ª–æ", lvl=6, lid=9, pos=[10, 13], ico="üë≤üèº")
    add_special_weapon_armor(weapon="–ü–∏—Å—Ç–æ–ª–∏")

    add_cor(name="–î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–∞", lvl=1, lid=10, pos=[4, 5])
    add_cor(name="–ê—à—Ä–∞—Ñ –õ–µ–æ–Ω–∏", lvl=3, lid=10, pos=[9, 15])

    add_cor(name="–°–∞–º–∏—Ä –í–µ–Ω–¥–µ—Ç—Ç–∞", lvl=2, lid=11, pos=[14, 27])

    add_cor(name="–ò–±—Ä–∞–≥–∏–º –ü–∞—à–∞", lvl=3, lid=12, pos=[6, 20])
    add_cor(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", lvl=3, lid=12, pos=[6, 16])

    add_cor(name="–ú–∞–π–∫ –¢–∞–π—Å–æ–Ω", lvl=4, lid=13, pos=[14, 16])
    add_cor(name="–°—É–ª–µ–π–º–∞–Ω –õ–∏–Ω—á", lvl=2, lid=13, pos=[5, 15])

    for person in persons:
        setattr(person, "is_protagonist", False)
    args_handle(session, args, t.Person, persons)
    if (args and not args.correct) or not args:
        session.add_all(persons)
    session.commit()


def fill_items(session: Session, args: Optional[Namespace]) -> None:
    """Fill items table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[Namespace]
        The command line argument
    """

    items: List[t.Item] = []
    items.append(
        t.Item(
            name="–ü–∏–∞—Å—Ç—Ä–∞",
            description="–ó–æ–ª–æ—Ç–∞—è –º–æ–Ω–µ—Ç–∞, –º–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞",
            is_tradable=True,
            cost=1,
        )
    )
    # hats
    items.append(
        t.Item(
            name="–ë–µ—Ä–µ—Ç", description="–ë–µ—Ä–µ—Ç –º–∏—Ä–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è", is_tradable=False
        )
    )
    items.append(
        t.Item(
            name="–ë–µ—Ä–µ—Ç",
            description="–ë–µ—Ä–µ—Ç –º–∏—Ä–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è",
            is_tradable=True,
            cost=5,
        )
    )

    items.append(
        t.Item(
            name="–ö—Ä–∞—Å–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.DAMAGE,
            buff=3,
            description="–®–ª—è–ø–∞ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            is_tradable=False,
        )
    )
    items.append(
        t.Item(
            name="–ö—Ä–∞—Å–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.DAMAGE,
            buff=3,
            description="–®–ª—è–ø–∞ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            is_tradable=True,
            cost=10,
        )
    )

    items.append(
        t.Item(
            name="–ß–µ—Ä–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.HP,
            buff=2,
            description="–®–ª—è–ø–∞ –∫–æ—Ä—Å–∞—Ä–∞",
            is_tradable=False,
        )
    )
    items.append(
        t.Item(
            name="–ß–µ—Ä–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.HP,
            buff=2,
            description="–®–ª—è–ø–∞ –∫–æ—Ä—Å–∞—Ä–∞",
            is_tradable=True,
            cost=10,
        )
    )

    items.append(
        t.Item(
            name="–ó–µ–ª–µ–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.HP,
            buff=5,
            description="–®–ª—è–ø–∞ –∫–æ—Ä—Å–∞—Ä–∞-–≥–ª–∞–≤–∞—Ä—è",
            is_tradable=False,
        )
    )
    items.append(
        t.Item(
            name="–ó–µ–ª–µ–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.HP,
            buff=5,
            description="–®–ª—è–ø–∞ –∫–æ—Ä—Å–∞—Ä–∞-–≥–ª–∞–≤–∞—Ä—è",
            is_tradable=True,
            cost=50,
        )
    )

    # clothes
    bp: int = ItemBuff.DEFENSE
    armors = []
    armors.append(
        t.Item(
            name="–ì–æ–ª–æ–µ —Ç–µ–ª–æ",
            buff_parameter=bp,
            buff=0,
            description="–ë–µ–∑ –æ–¥–µ–∂–¥—ã",
            is_tradable=False,
        )
    )

    armors.append(
        t.Item(
            name="–ö–æ–∂–∞–Ω—ã–π –∫–∞–º–∑–æ–ª",
            buff_parameter=bp,
            buff=5,
            description="–û–¥–µ–∂–¥–∞ –∫–æ—Ä—Å–∞—Ä–∞",
            is_tradable=False,
        )
    )
    armors.append(
        t.Item(
            name="–ö–æ–∂–∞–Ω—ã–π –∫–∞–º–∑–æ–ª",
            buff_parameter=bp,
            buff=5,
            description="–û–¥–µ–∂–¥–∞ –∫–æ—Ä—Å–∞—Ä–∞",
            is_tradable=True,
            cost=50,
        )
    )

    armors.append(
        t.Item(
            name="–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫",
            is_tradable=False,
            buff_parameter=bp,
            buff=10,
            description="–ó–∞—â–∏—Ç–∞ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
        )
    )
    armors.append(
        t.Item(
            name="–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫",
            is_tradable=True,
            buff_parameter=bp,
            buff=10,
            description="–ó–∞—â–∏—Ç–∞ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            cost=70,
        )
    )

    armors.append(
        t.Item(
            name="–õ—å–Ω—è–Ω–∞—è —Ä—É–±–∞—à–∫–∞",
            is_tradable=False,
            buff_parameter=bp,
            buff=1,
            description="–ü—Ä–æ—Å—Ç–∞—è –æ–¥–µ–∂–¥–∞",
        )
    )
    armors.append(
        t.Item(
            name="–õ—å–Ω—è–Ω–∞—è —Ä—É–±–∞—à–∫–∞",
            is_tradable=True,
            buff_parameter=bp,
            buff=1,
            description="–ü—Ä–æ—Å—Ç–∞—è –æ–¥–µ–∂–¥–∞",
            cost=20,
        )
    )

    for a in armors:
        a.is_armor = True
    items += armors

    # special
    items.append(t.Item(name="–ö–∞—Ä—Ç–∞ —Å –∫–ª–∞–¥–æ–º", is_tradable=False))
    items.append(
        t.Item(
            name="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
            buff_parameter=ItemBuff.DAMAGE,
            buff=1,
            description="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            is_tradable=False,
            is_usable=True
        )
    )

    # quest
    items.append(t.Item(name="–ü–∏—Å—å–º–æ –¥—Ä—É–≥–∞", is_tradable=False))
    items.append(t.Item(name="–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞", is_tradable=False))
    items.append(
        t.Item(name="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä—Å–∞—Ä–∞", is_tradable=False)
    )
    items.append(
        t.Item(
            name="–ö–æ—Ç –∫–æ—Ä–æ–ª—è",
            description=(
                "–¢–æ—Ç —Å–∞–º—ã–π –∫–æ—Ç. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –≤—ã —Å –Ω–∏–º —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è"
                " –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª–µ–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º"
            ),
            buff_parameter=ItemBuff.DEFENSE,
            buff=7,
            is_tradable=False,
        )
    )

    for i in items:
        i.is_usable = False

    # food
    usable = []
    usable.append(
        t.Item(
            name="–†–æ–º",
            buff_parameter=ItemBuff.DAMAGE,
            buff=3,
            description="–õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∫–æ—Ä—Å–∞—Ä–∞",
            duration=5,
            is_tradable=True,
            cost=3,
        )
    )
    usable.append(
        t.Item(
            name="–í–∏–Ω–æ",
            buff_parameter=ItemBuff.HP,
            buff=1,
            buff_reusable=True,
            description="–õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∂–∏—Ç–µ–ª—è",
            duration=5,
            is_tradable=True,
            cost=3,
        )
    )
    usable.append(
        t.Item(
            name="–ü–∏–≤–æ",
            buff_parameter=ItemBuff.DEFENSE,
            buff=3,
            description="–õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            duration=5,
            is_tradable=True,
            cost=3,
        )
    )
    usable.append(
        t.Item(
            name="–ú–µ—à–æ–∫ —Å –º—É–∫–æ–π",
            buff_parameter=ItemBuff.DEFENSE,
            buff=4,
            description="–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—á–µ–Ω—å–∫–∏",
            duration=4,
            is_tradable=True,
            cost=4,
        )
    )
    usable.append(
        t.Item(
            name="–í—è–ª–µ–Ω–æ–µ –º—è—Å–æ",
            buff_parameter=ItemBuff.HP,
            buff=5,
            is_tradable=True,
            cost=4,
            description="–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞",
        )
    )
    usable.append(
        t.Item(
            name="–ì–∞–ª–µ—Ç—ã",
            buff_parameter=ItemBuff.HP,
            buff=3,
            description="–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞",
            is_tradable=True,
            cost=2,
        )
    )
    usable.append(
        t.Item(
            name="–ñ–∞—Ä–µ–Ω–∞—è —Ä—ã–±–∞",
            buff_parameter=ItemBuff.HP,
            buff=4,
            is_tradable=True,
            cost=3,
            description="–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞",
        )
    )

    for i in usable:
        i.is_usable = True

    items += usable

    args_handle(session, args, t.Item, items)
    if (args and not args.correct) or not args:
        session.add_all(items)
    session.commit()


def fill_weapons(session: Session, args: Optional[Namespace]) -> None:
    """Fill weapons table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[Namespace]
        The command line argument
    """

    weapons: List[t.Weapon] = []

    text: str = "–ö—É–ª–∞–∫–∏"
    weapons.append(
        t.Weapon(name=text, range=1, dmg_min=0, dmg_max=1, is_tradable=False)
    )
    text = "–ö–æ—Ä—Ç–∏–∫"
    weapons.append(
        t.Weapon(
            name=text, range=1, dmg_min=0, dmg_max=2, is_tradable=True, cost=10
        )
    )
    weapons.append(
        t.Weapon(name=text, range=1, dmg_min=0, dmg_max=2, is_tradable=False)
    )
    text = "–¢–æ–ø–æ—Ä"
    weapons.append(
        t.Weapon(
            name=text, range=1, dmg_min=3, dmg_max=5, is_tradable=True, cost=20
        )
    )
    weapons.append(
        t.Weapon(name=text, range=1, dmg_min=3, dmg_max=5, is_tradable=False)
    )
    text = "–°–∞–±–ª—è"
    weapons.append(
        t.Weapon(
            name=text, range=1, dmg_min=4, dmg_max=6, is_tradable=True, cost=20
        )
    )
    weapons.append(
        t.Weapon(name=text, range=1, dmg_min=4, dmg_max=6, is_tradable=False)
    )

    text = "–ü–∏—Å—Ç–æ–ª–∏"
    weapons.append(
        t.Weapon(
            name=text,
            range=10,
            dmg_min=4,
            dmg_max=6,
            is_tradable=True,
            cost=40,
        )
    )
    weapons.append(
        t.Weapon(name=text, range=10, dmg_min=4, dmg_max=6, is_tradable=False)
    )
    text = "–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏"
    weapons.append(
        t.Weapon(
            name=text,
            range=10,
            dmg_min=6,
            dmg_max=12,
            is_tradable=True,
            cost=80,
        )
    )
    weapons.append(
        t.Weapon(name=text, range=10, dmg_min=6, dmg_max=12, is_tradable=False)
    )
    text = "–†—É–∂—å–µ"
    weapons.append(
        t.Weapon(
            name=text,
            range=20,
            dmg_min=5,
            dmg_max=10,
            is_tradable=True,
            cost=140,
        )
    )
    weapons.append(
        t.Weapon(name=text, range=20, dmg_min=5, dmg_max=10, is_tradable=False)
    )
    args_handle(session, args, t.Weapon, weapons)
    if (args and not args.correct) or not args:
        session.add_all(weapons)
    session.commit()


def fill_persons_items(
    session: Session,
    args: Optional[Namespace],
    civ_id: range,
    con_id: range,
    cor_id: range,
) -> None:
    """Fill persons table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    civ_id : range
        The range of civilians id
    con_id : range
        The range of condottieri id
    cor_id : range
        The range of corsairs id
    """

    SID: int = 1
    civils: List[t.Person_Item] = []
    hat = (
        session.query(t.Item)
        .filter_by(name="–ë–µ—Ä–µ—Ç", is_tradable=False)
        .first()
    )
    cloth = (
        session.query(t.Item)
        .filter_by(name="–õ—å–Ω—è–Ω–∞—è —Ä—É–±–∞—à–∫–∞", is_tradable=False)
        .first()
    )
    food = (
        session.query(t.Item)
        .filter_by(name="–í—è–ª–µ–Ω–æ–µ –º—è—Å–æ", is_tradable=True)
        .first()
    )
    alco = (
        session.query(t.Item).filter_by(name="–í–∏–Ω–æ", is_tradable=True).first()
    )
    for i in civ_id:
        if hat and cloth and food and alco:
            civils.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=hat.id, quantity=1
                )
            )
            civils.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=cloth.id, quantity=1
                )
            )
            civils.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=food.id, quantity=1
                )
            )
            civils.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=alco.id, quantity=1
                )
            )

    item = (
        session.query(t.Item)
        .filter_by(name="–ö–∞—Ä—Ç–∞ —Å –∫–ª–∞–¥–æ–º", is_tradable=False)
        .first()
    )
    (
        civils.append(
            t.Person_Item(
                person_id="1", save_id=SID, item_id=item.id, quantity=1
            )
        )
        if item
        else None
    )
    item = (
        session.query(t.Item).filter_by(name="–ë–µ—Ä–µ—Ç", is_tradable=True).first()
    )
    (
        civils.append(
            t.Person_Item(
                person_id="1", save_id=SID, item_id=item.id, quantity=1
            )
        )
        if item
        else None
    )

    condots: List[t.Person_Item] = []
    hat = (
        session.query(t.Item)
        .filter_by(name="–ö—Ä–∞—Å–Ω–∞—è —à–ª—è–ø–∞", is_tradable=False)
        .first()
    )
    cloth = (
        session.query(t.Item)
        .filter_by(name="–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫", is_tradable=False)
        .first()
    )
    food = (
        session.query(t.Item)
        .filter_by(name="–ì–∞–ª–µ—Ç—ã", is_tradable=True)
        .first()
    )
    alco = (
        session.query(t.Item).filter_by(name="–ü–∏–≤–æ", is_tradable=True).first()
    )
    item = (
        session.query(t.Item)
        .filter_by(name="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ", is_tradable=False)
        .first()
    )
    for i in con_id:
        if hat and cloth and food and alco and item:
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=hat.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=cloth.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=food.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=alco.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=item.id, quantity=1
                )
            )

    alco = session.query(t.Item).filter_by(name="–†–æ–º").first()
    (
        condots.append(
            t.Person_Item(
                person_id="11", save_id=SID, item_id=alco.id, quantity=10
            )
        )
        if alco
        else None
    )

    corsairs: List[t.Person_Item] = []
    hat = (
        session.query(t.Item)
        .filter_by(name="–ß–µ—Ä–Ω–∞—è —à–ª—è–ø–∞", is_tradable=False)
        .first()
    )
    cloth = (
        session.query(t.Item)
        .filter_by(name="–ö–æ–∂–∞–Ω—ã–π –∫–∞–º–∑–æ–ª", is_tradable=False)
        .first()
    )
    food = (
        session.query(t.Item)
        .filter_by(name="–ñ–∞—Ä–µ–Ω–∞—è —Ä—ã–±–∞", is_tradable=True)
        .first()
    )
    for i in cor_id:
        if hat and cloth and food and alco:
            corsairs.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=hat.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=cloth.id, quantity=1
                )
            )
            corsairs.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=food.id, quantity=1
                )
            )
            corsairs.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=alco.id, quantity=1
                )
            )

    item = (
        session.query(t.Item)
        .filter_by(name="–ó–µ–ª–µ–Ω–∞—è —à–ª—è–ø–∞", is_tradable=False)
        .first()
    )
    (
        corsairs.append(
            t.Person_Item(
                person_id="30", save_id=SID, item_id=item.id, quantity=11
            )
        )
        if item
        else None
    )

    item = (
        session.query(t.Item)
        .filter_by(name="–ö–æ—Ç –∫–æ—Ä–æ–ª—è", is_tradable=False)
        .first()
    )
    person = session.query(t.Person).filter_by(name="–î–æ–ø–ø–∏–æ –î—å—è–≤–æ–ª–æ").first()
    (
        corsairs.append(
            t.Person_Item(
                person_id=person.id, save_id=SID, item_id=item.id, quantity=1
            )
        )
        if item and person
        else None
    )

    lst = civils + condots + corsairs

    args_handle(session, args, t.Person_Item, lst)
    if (args and not args.correct) or not args:
        session.add_all(lst)
    session.commit()


def fill_persons_weapons(session: Session, args) -> None:
    """Fill persons_weapons table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    civ_id : range
        The range of civilians id
    con_id : range
        The range of condottieri id
    cor_id : range
        The range of corsairs id
    args : Optional[Namespace]
        The command line argument
    """

    SID: int = 1
    persons = session.query(t.Person).filter_by(save_id=SID).all()
    lst = []
    for person in persons:
        weapons: Optional[List[t.Weapon]] = (
            session.query(t.Weapon).filter_by(name=person.weapon).all()
        )
        if weapons:
            find_weapon = [w for w in weapons if not w.is_tradable]
            lst.append(
                t.Person_Weapon(
                    person_id=person.id,
                    save_id=SID,
                    weapon_id=find_weapon[0].id,
                )
            )

    weapon = (
        session.query(t.Weapon)
        .filter_by(name="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏", is_tradable=True)
        .first()
    )
    persons = [p for p in persons if p.name == "–õ–µ–æ–Ω–∞—Ä–¥–æ –ú–∞–∫–∞—Ä–æ–≤"]
    lst += (
        [
            t.Person_Weapon(
                person_id=persons[0].id, save_id=SID, weapon_id=weapon.id
            )
        ]
        if weapon and persons
        else []
    )

    args_handle(session, args, t.Person_Weapon, lst)
    if (args and not args.correct) or not args:
        session.add_all(lst)
    session.commit()


def fill_quests(session: Session, args: Optional[Namespace]):
    """Fill quests table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[Namespace]
        The command line argument
    """

    quests: List[t.Quest] = []

    # Condottieri's quests
    CID: ClassID = ClassID.CONDOTR
    # 1
    brief: str = "–°–ª–µ–¥—ã –∫–æ—Ç–∞"
    text: str = (
        "–£–∂–µ —Å–ª—ã—à–∞–ª, —á—Ç–æ –ø—Ä–æ–ø–∞–ª –∫–æ—Ç –∫–æ—Ä–æ–ª—è? –í–∏–¥–∏—à—å —Å–ª–µ–¥—ã –≤–æ–∫—Ä—É–≥? –ü—Ä–æ—Å–ª–µ–¥–∏,"
        "–º–æ–∂–µ—Ç –æ–Ω–∏ –ø—Ä–∏–≤–µ–¥—É—Ç —Ç–µ–±—è –∫ –∫–æ—Ç—É!"
    )
    kind: QuestKind = QuestKind.TRACE
    reward: int = 1000
    lid: int = 1
    item: str = "üêæ"

    rec: Optional[t.Person] = (
        session.query(t.Person)
        .filter_by(name="–î–µ–Ω–∏—Å –†–∏—á—á–∏", save_id=1)
        .first()
    )
    if rec:
        condition: str = (
            f"npc.id == '{rec.id}' and '{brief}' in [q.brief for q in"
            " hero.questbook if not q.is_done]"
        )
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                kind=kind,
                reward=reward,
                location_id=lid,
                item=item,
                receiving_npc_id=rec.id,
                condition=condition,
                class_id=CID,
            )
        )

    # 2
    brief = "–ü–∏—Å—å–º–æ –¥–ª—è —Å–æ—Å–ª—É–∂–∏–≤—Ü–∞"
    text = (
        "–ü–µ—Ä–µ–¥–∞–π –ø–∏—Å—å–º–æ –º–æ–µ–º—É —Ç–æ–≤–∞—Ä–∏—â—É –≤ –¢—Ä–∞–∫—Ç–∏—Ä–µ –Ω–∞ –ø—Ä–∏—Å—Ç–∞–Ω–∏, –∏ –ø—Ä–∏—Ö–æ–¥–∏"
        " –æ–±—Ä–∞—Ç–Ω–æ"
    )
    kind = QuestKind.DELIVERY
    reward = 1000
    item = "–ü–∏—Å—å–º–æ –¥—Ä—É–≥–∞"
    start_condition: str = (
        "'–°–ª–µ–¥—ã –∫–æ—Ç–∞' in [q.brief for q in" " self.questbook if not q.is_done]"
    )

    reward_item: str = "–ö–æ—Ä—Ç–∏–∫"
    reward_item_quantity: int = 1
    rec = (
        session.query(t.Person)
        .filter_by(name="–§—Ä–∞–Ω—á–µ—Å–∫–æ –¢–æ—Ç—Ç–∏", save_id=1)
        .first()
    )
    if rec:
        condition = (
            f"npc.id == '{rec.id}' and '{brief}' in [q.brief for q in"
            f" hero.questbook if not q.is_done] and '{item}' in [i.name for i"
            " in hero.inventory]"
        )
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                kind=kind,
                reward=reward,
                item=item,
                start_condition=start_condition,
                condition=condition,
                receiving_npc_id=rec.id,
                class_id=CID,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )

    # 3
    brief = "–ì–æ"
    text = "–í—ã–∏–≥—Ä–∞–π –≤ –≥–æ —É –î–µ–Ω–∏—Å–∞ –†–∏—á—á–∏"
    kind = QuestKind.GO
    reward = 1000
    item = "False"
    start_condition = (
        "'–ü–∏—Å—å–º–æ –¥–ª—è —Å–æ—Å–ª—É–∂–∏–≤—Ü–∞' in [q.brief for q in self.questbook"
        " if q.is_done]"
    )
    condition = (
        f"'{brief}' in [q.brief for q in hero.questbook if not q.is_done] and"
        f" [q for q in hero.questbook if q.brief == '{brief}'][0].item =="
        " 'True'"
    )
    quests.append(
        t.Quest(
            brief=brief,
            description=text,
            kind=kind,
            reward=reward,
            item=item,
            start_condition=start_condition,
            condition=condition,
            class_id=CID,
        )
    )

    # 4
    brief = "–ö –æ–∑—ë—Ä–∞–º"
    text = "–°–ø—Ä–æ—Å–∏ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞ –Ω–∞ –∑–∞–ø–∞–¥–µ –ø—Ä–æ —É–±–µ–≥–∞—é—â–µ–≥–æ –∫–æ—Ä—Å–∞—Ä–∞"
    kind = QuestKind.FIND
    reward = 2000
    rec = (
        session.query(t.Person)
        .filter_by(name="–ù–∏–∫–æ–ª–∞–π –°—Ñ–æ—Ä—Ü–∞", save_id=1)
        .first()
    )
    start_condition = (
        "'–ì–æ' in [q.brief for q in self.questbook" " if q.is_done]"
    )

    if rec:
        condition = (
            f"npc.id == '{rec.id}' and '{brief}' in [q.brief for q in"
            " hero.questbook if not q.is_done]"
        )
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                kind=kind,
                reward=reward,
                start_condition=start_condition,
                condition=condition,
                receiving_npc_id=rec.id,
                class_id=CID,
            )
        )

    # 5
    brief = "–†–∞–∑–±–æ—Ä–∫–∞ —Å –∫–æ—Ä—Å–∞—Ä–æ–º"
    text = "–ù—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –∫–æ—Ä—Å–∞—Ä–æ–º, –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ, —á—Ç–æ –∫–æ—à–∫–∞ —É –Ω–µ–≥–æ"
    kind = QuestKind.BATTLE
    reward = 2500
    start_condition = (
        "'–ì–æ' in [q.brief for q in self.questbook" " if q.is_done]"
    )

    rec = (
        session.query(t.Person)
        .filter_by(name="–°–∞–º–∏—Ä –í–µ–Ω–¥–µ—Ç—Ç–∞", save_id=1)
        .first()
    )
    if rec:
        condition = (
            f"enemy.name == '{rec.name}' and '{brief}' in [q.brief"
            " for q in self.questbook if not q.is_done]"
        )
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                kind=kind,
                reward=reward,
                start_condition=start_condition,
                condition=condition,
                receiving_npc_id=rec.id,
                class_id=CID,
            )
        )

    # 6
    brief = "–ì–æ"
    text = "–í—ã–∏–≥—Ä–∞–π –≤ –≥–æ —É –î–∂–∞–Ω–∫–∞—Ä–ª–æ –≠—Å–ø–æ–∑–∏—Ç–æ"
    kind = QuestKind.GO
    reward = 2500
    item = "False"
    start_condition = (
        "'–ì–æ' in [q.brief for q in self.questbook" " if q.is_done]"
    )
    condition = (
        f"'{text}' in [q.description for q in hero.questbook if not q.is_done]"
        " and [q for q in hero.questbook  if q.description =="
        f" '{text}'][0].item == 'True'"
    )
    quests.append(
        t.Quest(
            brief=brief,
            description=text,
            kind=kind,
            reward=reward,
            start_condition=start_condition,
            condition=condition,
            item=item,
            class_id=CID,
        )
    )

    # 7
    brief = "–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ"
    text = "–Ø —É–∑–Ω–∞–ª, —á—Ç–æ –î–µ–Ω–∏—Å –†–∏—á—á–∏ –≤—Ä–∞–ª, –∏ –∫–æ—à–∫–∞ —É –Ω–µ–≥–æ"
    kind = QuestKind.FIND
    reward = 2500
    start_condition = (
        "'–í—ã–∏–≥—Ä–∞–π –≤ –≥–æ —É –î–∂–∞–Ω–∫–∞—Ä–ª–æ –≠—Å–ø–æ–∑–∏—Ç–æ' in [q.description for q in"
        " self.questbook if q.is_done]"
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–µ–Ω–∏—Å –†–∏—á—á–∏", save_id=1)
        .first()
    )
    if rec:
        condition = (
            f"npc.id == '{rec.id}' and '{brief}' in [q.brief for q in"
            " hero.questbook if not q.is_done]"
        )
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                kind=kind,
                reward=reward,
                start_condition=start_condition,
                condition=condition,
                receiving_npc_id=rec.id,
                class_id=CID,
            )
        )

    # 8
    brief = "–°–ø–∞—Å–µ–Ω–∏–µ –∫–æ—Ç–∞"
    text = "–ö–æ—Ç–∞ –∫–æ—Ä–æ–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ–≤–∞–ª–∏! –ï–≥–æ –Ω—É–∂–Ω–æ —Å–ø–∞—Å—Ç–∏ –∏–∑ –ª–∞–ø –∫–æ—Ä—Å–∞—Ä–æ–≤"
    kind = QuestKind.UNION_AND_GRAB
    reward = 3500
    item = "–ö–æ—Ç –∫–æ—Ä–æ–ª—è"
    quantity: int = 1
    start_condition = (
        "'–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ' in [q.brief for q in" " self.questbook if not q.is_done]"
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–æ–ø–ø–∏–æ –î—å—è–≤–æ–ª–æ", save_id=1)
        .first()
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–æ–ø–ø–∏–æ –î—å—è–≤–æ–ª–æ", save_id=1)
        .first()
    )
    if rec:
        condition = f"'{item}' in [i.name for i in hero.inventory]"
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                kind=kind,
                reward=reward,
                item=item,
                quantity=quantity,
                start_condition=start_condition,
                condition=condition,
                receiving_npc_id=rec.id,
                class_id=CID,
            )
        )

    # 9
    brief = "–ó–∞–¥–∞–Ω–∏–µ –∫–æ—Ä–æ–ª—è"
    text = "–ö–æ—Ä–æ–ª—å –¥–∞–ª –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–π—Ç–∏ –µ–≥–æ –∫–æ—Ç–∞. –ó–∞—Ü–µ–ø–æ–∫ –Ω–µ—Ç"
    kind = QuestKind.UNION_AND_GRAB
    item = "–ö–æ—Ç –∫–æ—Ä–æ–ª—è"
    quantity = 1
    start_condition = (
        "'–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ—Ç–∞' not in [q.brief for q in" " self.questbook]"
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–æ–ø–ø–∏–æ –î—å—è–≤–æ–ª–æ", save_id=1)
        .first()
    )
    if rec:
        condition = f"'{item}' in [i.name for i in hero.inventory]"
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                kind=kind,
                reward=reward,
                item=item,
                quantity=quantity,
                start_condition=start_condition,
                condition=condition,
                receiving_npc_id=rec.id,
                class_id=CID,
            )
        )

    # 10
    brief = "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ—Ç–∞"
    text = "–ù–∞–∫–æ–Ω–µ—Ü –≤—ã –Ω–∞—à–ª–∏ –∫–æ—Ç–∞! –ù–æ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∫–æ—Ä–æ–ª—é?"
    kind = QuestKind.BATTLE_AND_DELIVERY
    reward = 5000
    reward_item = "–ü–∏–∞—Å—Ç—Ä–∞"
    reward_item_quantity = 1000
    item = "–ö–æ—Ç –∫–æ—Ä–æ–ª—è"
    quantity = 1
    rec = (
        session.query(t.Person)
        .filter_by(name="–ú–∞—Ç—Ç–µ–æ –¢–∞–ø–æ—á–∫–∏–Ω", save_id=1)
        .first()
    )
    if rec:
        condition = (
            f"npc.id == '{rec.id}' and '{brief}' in [q.brief for q in"
            f" hero.questbook if not q.is_done] and '{item}' in [i.name for i"
            " in hero.inventory]"
        )
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                kind=kind,
                reward=reward,
                item=item,
                quantity=quantity,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
                condition=condition,
                receiving_npc_id=rec.id,
                class_id=CID,
            )
        )

    # corsairs quests
    # 1
    brief = "–ü–æ–¥—Å—Ç–∞–≤–∞"
    text = "–ù–∞–π–¥–∏ –û–º–∞—Ä–∞ –ö–∞–ø–æ–Ω–µ –Ω–∞ –∑–∞–ø–∞–¥–µ –≤ –û—Ä–µ—Ö–æ–≤–æ–º –ª–µ—Å—É"
    rec = (
        session.query(t.Person)
        .filter_by(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id == str({rec.id})"
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=1,
                kind=QuestKind.FIND,
                reward=1000,
                receiving_npc_id=rec.id,
                giving_npc_id=giv.id,
                condition=condition,
                class_id=ClassID.CORSAIR,
            )
        )
    # 2
    brief = "–¢–æ—Ç —Å–∞–º—ã–π.. –†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ"
    text = "–ù–∞–π–¥–∏ –†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ –Ω–∞ —é–≥–µ –≤ –ö–æ—Ä–∞–ª–ª–æ–≤–æ–º –≥—Ä–æ—Ç–µ."
    start_condition = (
        "'–§–∏–Ω–∞–ª—å–Ω—ã–π –±–æ–π' not in [q.brief for q in self.questbook] and"
        " '–ü–æ–¥—Å—Ç–∞–≤–∞' in [q.brief for q in self.questbook]"
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id == str({rec.id})"
        reward_item = "–°–∞–±–ª—è"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=1,
                kind=QuestKind.FIND,
                reward=1000,
                receiving_npc_id=rec.id,
                giving_npc_id=giv.id,
                condition=condition,
                start_condition=start_condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )
    # 3
    brief = "–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞"
    text = "–ü—Ä–∏–Ω–µ—Å–∏ –≤–∏–Ω–∞ –¥–ª—è –†–∏–∑–æ—Ç—Ç–æ."
    start_condition = (
        "'–°–∏–ª—å–Ω–µ–π—à–∏–π' not in [q.brief for q in self.questbook] and"
        " '–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞' not in [item.name for item in self.inventory]"
        " and '–¢–æ—Ç —Å–∞–º—ã–π.. –†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ' in [q.brief for q in self.questbook]"
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–∂–∞–º–∞–ª –ö–æ—Ä–ª–µ–æ–Ω–µ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id == str({rec.id})"
        reward_item = "–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=7,
                kind=QuestKind.FIND,
                reward=1000,
                receiving_npc_id=rec.id,
                giving_npc_id=giv.id,
                condition=condition,
                start_condition=start_condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )
    # 4
    brief = "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Å–º–µ–ª–æ—Å—Ç–∏"
    text = (
        "–û–¥–æ–ª–µ–π –°–µ–≤–µ—Ä—É—Å–∞ –°–Ω–µ–π–ø–∞ –∏ –ø—Ä–∏—Ö–æ–¥–∏ –∫ –ú–µ—Å—É—Ç—É –û–∑–∏–ª—É –Ω–∞ —é–≥ –Ω–∞"
        " –ë–∞–Ω–∞–Ω–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤."
    )
    start_condition = (
        "'–°–∏–ª—å–Ω–µ–π—à–∏–π' not in [q.brief for q in self.questbook] and"
        " '–¢–æ—Ç —Å–∞–º—ã–π.. –†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ' in [q.brief for q in self.questbook"
        " if q.is_done]")
    rec = (
        session.query(t.Person).filter_by(name="–ú–µ—Å—É—Ç –û–∑–∏–ª", save_id=1).first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–∂–∞–º–∞–ª –ö–æ—Ä–ª–µ–æ–Ω–µ", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id ==str({rec.id})"
        reward_item = "–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=7,
                kind=QuestKind.FIND,
                reward=2500,
                receiving_npc_id=rec.id,
                giving_npc_id=rec.id,
                condition=condition,
                start_condition=start_condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )
    # 5
    brief = "–°–∏–ª—å–Ω–µ–π—à–∏–π"
    text = "–î–µ—Ä–∂–∏ –±—É—Ç—ã–ª–∫—É –≤–∏–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –†–∏–∑–æ—Ç—Ç–æ"
    start_condition = (
        "'–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞' in [q.brief for q in self.questbook if q.is_done]"
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person).filter_by(name="–ú–µ—Å—É—Ç –û–∑–∏–ª", save_id=1).first()
    )
    if rec and giv:
        condition = f"npc.id ==str({rec.id})"
        item = "–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞"
        reward_item = "–ü–∏–≤–æ"
        reward_item_quantity = 2
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=5,
                kind=QuestKind.DELIVERY,
                item=item,
                reward=3000,
                receiving_npc_id=rec.id,
                giving_npc_id=rec.id,
                condition=condition,
                start_condition=start_condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )
    # 6
    brief = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
    text = "–û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –∫ –î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–µ –Ω–∞ –≤–æ—Å—Ç–æ–∫ –≤ –ë–∞–∑–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ—É–ª–∫–∏"
    start_condition = (
        "'–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞' in [item.name for item in self.inventory]"
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–∞", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id ==str({rec.id})"
        reward_item = "–ú–µ—à–æ–∫ —Å –º—É–∫–æ–π"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=10,
                kind=QuestKind.FIND,
                reward=1000,
                receiving_npc_id=rec.id,
                giving_npc_id=rec.id,
                start_condition=start_condition,
                condition=condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )

    brief = "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–æ–π"
    text = (
        "–ù–∞–π–¥–∏ –í–∏–Ω—Å–µ–Ω—Ç–∞ –≤–∞–Ω –ì–æ–≥–∞ –Ω–∞ —Å–µ–≤–µ—Ä–µ –≤ –¢—Ä–∞–∫—Ç–∏—Ä–µ –Ω–∞ –ø—Ä–∏—Å—Ç–∞–Ω–∏ –∏ —Å—Ä–∞–∑–∏ –µ–≥–æ."
        "\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –∫ –û–º–∞—Ä—É –ö–∞–ø–æ–Ω–µ –≤ –û—Ä–µ—Ö–æ–≤—ã–π –ª–µ—Å."
    )
    start_condition = (
        "'–°–∏–ª—å–Ω–µ–π—à–∏–π' in [q.brief for q in self.questbook if q.is_done]"
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–∞", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id ==str({rec.id})"
        reward_item = "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä—Å–∞—Ä–∞"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=2,
                kind=QuestKind.FIND,
                reward=5000,
                receiving_npc_id=rec.id,
                giving_npc_id=rec.id,
                condition=condition,
                start_condition=start_condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )

    for q in quests:
        setattr(q, "is_done", False)

    args_handle(session, args, t.Quest, quests)
    if (args and not args.correct) or not args:
        session.add_all(quests)
    session.commit()


def fill_persons_quests(session: Session, args: Optional[Namespace]) -> None:
    """Fill persons quests table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    args : Optional[Namespace]
        The command line argument
    """

    SID: int = 1
    quests: Optional[List[t.Quest]] = session.query(t.Quest).all()
    if quests is None:
        raise ValueError("Quests table empty")
    persons_quests: List[t.Person_Quest] = []

    def add_person_quest(name, brief=None, description=None) -> None:
        npc: Optional[t.Person] = (
            session.query(t.Person).filter_by(name=name, save_id=SID).first()
        )
        quest: Optional[t.Quest] = None
        if brief:
            fit_quests = (
                [q for q in quests if q.brief == brief] if quests else []
            )
            quest = fit_quests[0] if fit_quests else None
        elif description:
            fit_quests = (
                [q for q in quests if q.description == description]
                if quests
                else []
            )
            quest = fit_quests[0] if fit_quests else None
        if npc and quest:
            quest.giving_npc_id = npc.id
            persons_quests.append(
                t.Person_Quest(
                    person_id=npc.id,
                    save_id=SID,
                    quest_id=quest.id,
                )
            )
        elif not quest:
            raise ValueError("Quest did not found")
        elif not npc:
            raise ValueError("NPC did not found")

    add_person_quest("–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", "–°–ª–µ–¥—ã –∫–æ—Ç–∞")
    add_person_quest("–î–µ–Ω–∏—Å –†–∏—á—á–∏", "–ü–∏—Å—å–º–æ –¥–ª—è —Å–æ—Å–ª—É–∂–∏–≤—Ü–∞")
    add_person_quest("–î–µ–Ω–∏—Å –†–∏—á—á–∏", "–ì–æ")
    add_person_quest("–î–µ–Ω–∏—Å –†–∏—á—á–∏", "–ö –æ–∑—ë—Ä–∞–º")
    add_person_quest("–ù–∏–∫–æ–ª–∞–π –°—Ñ–æ—Ä—Ü–∞", "–†–∞–∑–±–æ—Ä–∫–∞ —Å –∫–æ—Ä—Å–∞—Ä–æ–º")
    add_person_quest(
        "–î–∂–∞–Ω–∫–∞—Ä–ª–æ –≠—Å–ø–æ–∑–∏—Ç–æ", description="–í—ã–∏–≥—Ä–∞–π –≤ –≥–æ —É –î–∂–∞–Ω–∫–∞—Ä–ª–æ –≠—Å–ø–æ–∑–∏—Ç–æ"
    )
    add_person_quest("–î–∂–∞–Ω–∫–∞—Ä–ª–æ –≠—Å–ø–æ–∑–∏—Ç–æ", "–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ")
    add_person_quest("–î–µ–Ω–∏—Å –†–∏—á—á–∏", "–°–ø–∞—Å–µ–Ω–∏–µ –∫–æ—Ç–∞")
    add_person_quest("–î–æ–ø–ø–∏–æ –î—å—è–≤–æ–ª–æ", "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ—Ç–∞")
    add_person_quest("–ú–∞—Ç—Ç–µ–æ –¢–∞–ø–æ—á–∫–∏–Ω", "–ó–∞–¥–∞–Ω–∏–µ –∫–æ—Ä–æ–ª—è")

    # for corsairs
    add_person_quest("–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", "–ü–æ–¥—Å—Ç–∞–≤–∞")
    add_person_quest("–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", "–¢–æ—Ç —Å–∞–º—ã–π.. –†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ")
    add_person_quest("–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", "–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞")
    add_person_quest("–î–∂–∞–º–∞–ª –ö–æ—Ä–ª–µ–æ–Ω–µ", "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Å–º–µ–ª–æ—Å—Ç–∏")
    add_person_quest("–ú–µ—Å—É—Ç –û–∑–∏–ª", "–°–∏–ª—å–Ω–µ–π—à–∏–π")
    add_person_quest("–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞")
    add_person_quest("–î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–∞", "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–æ–π")

    for pq in persons_quests:
        pq.is_done = False

    args_handle(session, args, t.Person_Quest, persons_quests)
    if (args and not args.correct) or not args:
        session.add_all(persons_quests)
    session.commit()
