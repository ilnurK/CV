#include <math.h>
#include <limits.h>

#include "s21_math.h"

//13
#test sintest
  ck_assert(sin(S21_PI) - s21_sin(S21_PI) < S21_EPS);
  ck_assert(sin(S21_EPS) - s21_sin(S21_EPS) < S21_EPS);  
  ck_assert(sin(S21_EPS * 2) - s21_sin(S21_EPS * 2) < S21_EPS);
  ck_assert(sin(S21_EPS / 2) - s21_sin(S21_EPS / 2) < S21_EPS);
  ck_assert(isnan(s21_sin(S21_INF)) == isnan(sin(S21_INF)));
  ck_assert(isnan(s21_sin(S21_NINF)) == isnan(sin(S21_NINF)));
  ck_assert(isnan(s21_sin(S21_NAN))  == isnan(sin(S21_NAN)));
  ck_assert(sin(-0.1 * S21_PI / 2) - s21_sin(-0.1 * S21_PI / 2)< S21_EPS);
  ck_assert(sin(3 * S21_PI / 2) - s21_sin(3 * S21_PI / 2)< S21_EPS);
  ck_assert(sin(67 * S21_PI / 2) - s21_sin(67 * S21_PI / 2)< S21_EPS);
  ck_assert(sin(-55 * S21_PI / 2) - s21_sin(-55 * S21_PI / 2)< S21_EPS);
  ck_assert(sin(0.7 * S21_PI / 2) - s21_sin(0.7 * S21_PI / 2)< S21_EPS);

//14
#test sqrttest
  ck_assert(sqrt(S21_PI/ 2) - s21_sqrt(S21_PI / 2)< S21_EPS);
  ck_assert_ldouble_infinite(sqrt(S21_INF));
  ck_assert_float_eq(s21_sqrt(S21_INF), sqrt(S21_INF));
  ck_assert(sqrt(S21_EPS) - s21_sqrt(S21_EPS * 2 *1e13) <S21_EPS);
  ck_assert(sqrt(S21_EPS / 2) - s21_sqrt(S21_EPS / 2) <S21_EPS);
  ck_assert(s21_sqrt(0) == sqrt(0));
  ck_assert(isnan(s21_sqrt(S21_NINF)));
  ck_assert(isnan(s21_sqrt(S21_NAN)));
  ck_assert(isnan(s21_sqrt(-0.1 * S21_PI / 2)));
  ck_assert(sqrt(3 * S21_PI / 2) - s21_sqrt(3 * S21_PI / 2)< S21_EPS);
  ck_assert(sqrt(67 * S21_PI / 2) - s21_sqrt(67 * S21_PI / 2)< S21_EPS);
  ck_assert(sqrt(0.7 * S21_PI / 2) - s21_sqrt(0.7 * S21_PI / 2)< S21_EPS);

//15
#test tantest
  ck_assert(tan(S21_PI/ 3) - s21_tan(S21_PI / 3)< S21_EPS);
  ck_assert(tan(S21_PI/ 2.0159) - s21_tan(S21_PI / 2.0159)< S21_EPS);
  ck_assert(tan(S21_PI/ 4) - s21_tan(S21_PI / 4)< S21_EPS);
  ck_assert(tan(S21_PI/ 2) - s21_tan(S21_PI / 2)< S21_EPS);
  ck_assert(tan(-S21_PI/ 2) - s21_tan(-S21_PI / 2)< S21_EPS);
  ck_assert(tan(-3 * S21_PI/ 2) - s21_tan(-3 * S21_PI / 2)< S21_EPS);

  ck_assert(tan(S21_EPS) - s21_tan(S21_EPS)< S21_EPS);
  ck_assert(tan(S21_EPS * 2) - s21_tan(S21_EPS * 2)< S21_EPS);
  ck_assert(tan(S21_EPS / 2) - s21_tan(S21_EPS / 2)< S21_EPS);
  ck_assert(tan(0.999999) - s21_tan(0.999999) < S21_EPS);
  
  ck_assert(isnan(s21_tan(S21_INF)));
  ck_assert(isnan(s21_tan(S21_NINF)));
  ck_assert(isnan(s21_tan(S21_NAN)));
  ck_assert(tan(-0.1 * S21_PI / 2) - s21_tan(-0.1 * S21_PI / 2)< S21_EPS);
  ck_assert(tan(3 * S21_PI / 2) - s21_tan(3 * S21_PI / 2)< S21_EPS);
  ck_assert(tan(67 * S21_PI / 2.43) - s21_tan(67 * S21_PI / 2.43)< S21_EPS);
  ck_assert(fabsl(s21_tan(0) - tan(0)) < S21_EPS);
  ck_assert(fabsl(s21_tan(S21_PI / 4) - tan(S21_PI / 4)) < S21_EPS);
  ck_assert(fabsl(s21_tan(S21_PI) - tan(S21_PI)) < S21_EPS);
  ck_assert(fabsl(s21_tan(3 * S21_PI / 2.5) - tan(3 * S21_PI / 2.5)) < S21_EPS);
  ck_assert(fabsl(s21_tan(-3 * S21_PI / 2.3) - tan(-3 * S21_PI / 2.3)) < S21_EPS);
  //ck_assert(tan(-55 * S21_PI / 2.115) - s21_tan(-55 * S21_PI / 2.115)< S21_EPS);
  ck_assert(tan(0.7 * S21_PI / 2) - s21_tan(0.7 * S21_PI / 2)< S21_EPS);
  
#test abtest
  ck_assert_int_eq(s21_abs(5), 5);
  ck_assert_int_eq(s21_abs(-8), 8);
  ck_assert_int_eq(s21_abs(0), 0);

#test fabstest
  ck_assert(s21_fabs(5.0) - fabs(5.0)< S21_EPS);
  ck_assert(s21_fabs(-8.3) - fabs(-8.3)< S21_EPS);
  ck_assert(s21_fabs(0.0) - fabs(0.0)< S21_EPS);

#test floortest
  ck_assert(s21_floor(5.8) - floor(5.8)< S21_EPS);
  ck_assert(s21_floor(-7.9) - floor(-7.9)< S21_EPS);
  ck_assert(s21_floor(3.0) - floor(3.0)< S21_EPS);
  ck_assert(s21_floor(3.3) - floor(3.3)< S21_EPS);
  ck_assert(s21_floor(9.999) - floor(9.999)< S21_EPS);
  ck_assert(s21_floor(S21_INF) == floor(S21_INF));
  ck_assert(s21_floor(S21_NINF) == floor(S21_NINF));
  ck_assert(isnan(s21_floor(S21_NAN)) == isnan(floor(S21_NAN)));

#test fmodtest
  ck_assert(s21_fmod(6.4, 2.0) - fmod(6.4, 2.0)< S21_EPS);
  ck_assert(s21_fmod(0.3, 1.12) - fmod(0.3, 1.12)< S21_EPS);
  ck_assert(isnan(s21_fmod(S21_INF, S21_INF)));
  ck_assert(s21_fmod(3.133, 2.01) - fmod(3.133, 2.01)< S21_EPS);
  ck_assert(s21_fmod(-6.5, 2.0) - fmod(-6.5, 2.0)< S21_EPS);
  ck_assert(s21_fmod(6.5, -2.6987) - fmod(6.5, -2.6987)< S21_EPS);
  ck_assert(s21_fmod(215125, 15.001) - fmod(215125, 15.001)< S21_EPS);
  ck_assert(s21_fmod(-1.5897, -1.5469) - fmod(-1.5897, -1.5469)< S21_EPS);
  ck_assert(fabsl(s21_fmod(6, -4) - fmod(6, -4)) < S21_EPS);
  ck_assert(isnan(s21_fmod(S21_NAN, 3)) == isnan(fmod(S21_NAN, 3)));
  ck_assert(isnan(s21_fmod(3, S21_NAN)) == isnan(fmod(3, S21_NAN)));
  ck_assert(isnan(s21_fmod(S21_NAN, 0)) == isnan(fmod(S21_NAN, 0)));
  ck_assert(isnan(s21_fmod(39, 0)) == isnan(fmod(39, 0)));
  ck_assert(s21_fmod(0, 39) - fmod(0, 39)< S21_EPS);
  ck_assert(isnan(s21_fmod(S21_INF, S21_INF)) == isnan(fmod(S21_INF, S21_INF)));
  ck_assert(isnan(s21_fmod(-S21_INF, S21_INF)) == isnan(fmod(-S21_INF, S21_INF)));
  ck_assert(isnan(s21_fmod(S21_NAN, S21_NAN)) == isnan(fmod(S21_NAN, S21_NAN)));

#test logtest
  ck_assert(s21_log(2.0) - log(2.0)< S21_EPS);
  ck_assert(s21_log(2.3253524) - log(2.3253524)< S21_EPS);
  ck_assert(s21_log(23253524) - log(23253524)< S21_EPS);
  ck_assert(s21_log(2325.3524) - log(2325.3524)< S21_EPS);
  ck_assert(s21_log(5.0) - log(5.0)< S21_EPS);
  ck_assert(s21_log(1) - log(1)< S21_EPS);
  ck_assert(isinf(s21_log(0)) == isinf(log(0)));
  ck_assert(s21_log(1.1) - log(1.1)< S21_EPS);
  ck_assert(s21_log(0.1) - log(0.1)< S21_EPS);
  ck_assert_double_infinite(s21_log(S21_INF));
  ck_assert_double_infinite(s21_log(-0));
  ck_assert_double_infinite(s21_log(0));
  ck_assert_double_nan(s21_log(-S21_INF));
  ck_assert(isnan(s21_log(S21_NAN)) == isnan(log(S21_NAN)));
  ck_assert_double_nan(s21_log(-0.1));
  ck_assert_double_nan(s21_log(-0.001));
  ck_assert_double_nan(s21_log(-5));
  ck_assert(isnan(s21_log(-1)) == isnan(log(-1)));

#test powtest
  ck_assert(s21_pow(1, 0) - pow(1, 0)< S21_EPS);
  ck_assert(s21_pow(1, 1000) - pow(1, 1000)< S21_EPS);
  ck_assert(s21_pow(0, 1) - pow(0, 1)< S21_EPS);
  ck_assert(s21_pow(-1, 2) - pow(-1, 2)< S21_EPS);
  ck_assert(s21_pow(-1, S21_INF) - pow(-1, S21_INF)< S21_EPS);
  ck_assert(s21_pow(-1, -S21_INF) - pow(-1, -S21_INF)< S21_EPS);
  ck_assert(s21_pow(-0.1, S21_INF) - pow(-0.1, S21_INF)< S21_EPS);
  ck_assert(s21_pow(0.1, S21_INF) - pow(0.1, S21_INF)< S21_EPS);
  ck_assert(s21_pow(S21_EPS * 2, 2) - pow(S21_EPS *2, 2) <S21_EPS);
  ck_assert(s21_pow(2, 3) - pow(2, 3)< S21_EPS);
  ck_assert(s21_pow(0.1, 1.3) - pow(0.1, 1.3)< S21_EPS);
  ck_assert(s21_pow(6, 0) - pow(6, 0)< S21_EPS);
  ck_assert(s21_pow(1, 9) - pow(1, 9)< S21_EPS);
  ck_assert(s21_pow(-10, 4) - pow(-10, 4)< S21_EPS);
  ck_assert(s21_pow(-3, 3) - pow(-3, 3)< S21_EPS);
  ck_assert(s21_pow(-3.5, 2) - pow(-3.5, 2)< S21_EPS);
  ck_assert(s21_pow(123, 3) - pow(123, 3)< S21_EPS);
  ck_assert(s21_pow(-S21_INF, 3) == pow(-S21_INF, 3));
  ck_assert(s21_pow(-S21_INF, S21_INF) == pow(-S21_INF, S21_INF));
  ck_assert(s21_pow(-3, S21_INF) == pow(-3, S21_INF));
  ck_assert(s21_pow(-S21_INF, -S21_INF) - pow(-S21_INF, -S21_INF)< S21_EPS);
  ck_assert_ldouble_infinite(s21_pow(S21_INF, 1));
  ck_assert_ldouble_infinite(s21_pow(S21_INF, 6));
  ck_assert(isnan(s21_pow(-9, -3.6)));
  ck_assert(isnan(s21_pow(-9, 3.6)));
  ck_assert(isnan(s21_pow(-5.5, -0.6)));
  ck_assert(isnan(s21_pow(S21_NAN, 1)));
  ck_assert_ldouble_infinite(s21_pow(-3, S21_INF));
  ck_assert_ldouble_infinite(s21_pow(0.3, -S21_INF));
  ck_assert_ldouble_infinite(s21_pow(-S21_INF, S21_INF));
  ck_assert(s21_pow(S21_INF, -S21_INF) - pow(S21_INF, -S21_INF)< S21_EPS);
  ck_assert(s21_pow(0.3, S21_INF) == pow(0.3, S21_INF));
  ck_assert(isnan(s21_pow(S21_NAN, S21_NAN)));
  ck_assert(isnan(s21_pow(2, S21_NAN)));
  ck_assert(s21_pow(0, 0) - pow(0, 0)< S21_EPS);
  ck_assert(s21_pow(3, -2.35439) - pow(3, -2.35439)< S21_EPS);
  ck_assert(s21_pow(2.3, -3) - pow(2.3, -3)< S21_EPS);

#test exptest
  ck_assert(s21_exp(5.0) - exp(5.0)< S21_EPS);
  ck_assert(s21_exp(10.5) - exp(10.5)< S21_EPS);
  ck_assert(s21_exp(-S21_INF) == exp(-S21_INF));
  ck_assert(s21_exp(-2.0) - exp(-2.0)< S21_EPS);
  ck_assert(s21_exp(1.1) - exp(1.1)< S21_EPS);
  ck_assert(s21_exp(0.1) - exp(0.1)< S21_EPS);
  ck_assert(s21_exp(-0.001) - exp(-0.001)< S21_EPS);
  ck_assert(s21_exp(0.0) - exp(0.0)< S21_EPS);
  ck_assert_double_infinite(s21_exp(S21_INF));
  ck_assert(s21_exp(S21_NINF) == exp(S21_NINF));
  ck_assert(s21_exp(-S21_INF) == 0);
  ck_assert_double_nan(s21_exp(S21_NAN));

#test ceiltest
  ck_assert(s21_ceil(-1.5) == ceil(-1.5));
  ck_assert(s21_ceil(S21_INF) == ceil(S21_INF));
  ck_assert(s21_ceil(-S21_INF) == ceil(-S21_INF));
  ck_assert(s21_ceil(0) == ceil(0));
  ck_assert(s21_ceil(3.4) == ceil(3.4));
  ck_assert(s21_ceil(2) == ceil(2));

#test costest
  ck_assert(fabsl(s21_cos(0) - cos(0)) < S21_EPS);
  ck_assert(isnan(s21_cos(S21_INF)) == isnan(cos(S21_INF)));
  ck_assert(fabsl(s21_cos(S21_PI / 4) - cos(S21_PI / 4)) < S21_EPS);
  ck_assert(fabsl(s21_cos(S21_PI / 2) - cos(S21_PI / 2)) < S21_EPS);
  ck_assert(fabsl(s21_cos(-0.5) - cos(-0.5)) < S21_EPS);

#test s21_asintest   
  double d = 0;
  ck_assert_double_eq_tol(asin(d), s21_asin(d), 0.00001);
  d = -0;
  ck_assert_double_eq_tol(asin(d), s21_asin(d), 0.00001);    
  d = 1;
  ck_assert_double_eq_tol(asin(d), s21_asin(d), 0.00001);   
  d = 45.3;
  ck_assert_int_eq(isnan(asin(d)), isnan(s21_asin(d)));
  d = -42;
  ck_assert_int_eq(isnan(asin(d)), isnan(s21_asin(d)));  
  d = -42.99;
  ck_assert_int_eq(isnan(asin(d)), isnan(s21_asin(d)));
  d = S21_NAN;
  ck_assert_int_eq(isnan(asin(d)), isnan(s21_asin(d)));    
  d = S21_INF;
  ck_assert_int_eq(isnan(asin(d)), isnan(s21_asin(d))); 
  d = S21_NINF;
  ck_assert_int_eq(isnan(asin(d)), isnan(s21_asin(d))); 
  d = 0.99999;
  ck_assert_double_eq_tol(asin(d), s21_asin(d), 0.00001);   
  d = 0.00001;
  ck_assert_double_eq_tol(asin(d), s21_asin(d), 0.00001);
  for (float k = -1; k <= 1; k += 0.0771)  {  
    double a = s21_asin(k);
    double b = asin(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test s21_acostest
  double d = 0;
  ck_assert_double_eq_tol(acos(d), s21_acos(d), 0.000001);
  d = -0;
  ck_assert_double_eq_tol(acos(d), s21_acos(d), 0.000001);
  d = 0.3;
  ck_assert_double_eq_tol(acos(d), s21_acos(d), 0.000001);
  d = 1.3;
  ck_assert_int_eq(isnan(acos(d)), isnan(s21_acos(d)));
  d = -7;
  ck_assert_int_eq(isnan(acos(d)), isnan(s21_acos(d)));
  d = -12.5;
  ck_assert_int_eq(isnan(acos(d)), isnan(s21_acos(d)));
  d = S21_NAN;
  ck_assert_int_eq(isnan(acos(d)), isnan(s21_acos(d)));
  d = S21_NINF;
  ck_assert_int_eq(isnan(acos(d)), isnan(s21_acos(d)));
  d = S21_INF;
  ck_assert_int_eq(isnan(acos(d)), isnan(s21_acos(d)));
  d = 0.99999;
  ck_assert_double_eq_tol(acos(d), s21_acos(d), 0.000001);
  d = 0.000001;
  ck_assert_double_eq_tol(acos(d), s21_acos(d), 0.000001);
  for (float k = -1; k <= 1; k += 0.1) {
    double a = s21_acos(k);
    double b = acos(k);
    ck_assert_double_eq_tol(a, b, 1e-7);
}
  for (float k = -1; k <= 1; k += 0.0305) {
    double a = s21_acos(k);
    double b = acos(k);
    ck_assert_double_eq_tol(a, b, 1e-7);
}

#test s21_abs_1
  int i = 111;
  ck_assert_int_eq((i), s21_abs(i));
  i = -111;
  ck_assert_int_eq(111, s21_abs(i));
  i = -0;
  ck_assert_int_eq((i), s21_abs(i));
  i = 0;
  ck_assert_int_eq((i), s21_abs(i));
  i = INT_MAX;
  ck_assert_int_eq((i), s21_abs(i));
  i = INT_MIN;
  ck_assert_int_eq((i), s21_abs(i));

#test s21_atantest
  double d = 0;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = 1;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = -0;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = 23;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = 2532.3;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = -345;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = -345.4;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = S21_NAN;
  ck_assert_int_eq(isnan(atan(d)), isnan(s21_atan(d)));
  d = S21_INF;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = S21_NINF;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = 0.999999;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = 0.00001;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = 0.01;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  d = 1.99999;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 0.000001);
  for (float k = -10; k <= 10; k += 4){
    double a = s21_atan(k);
    double b = atan(k);
    ck_assert_double_eq_tol(a, b, 1e-7);
    }
  d = 0.9999999;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 1e-6);
  d = -0.9999999;
  ck_assert_double_eq_tol(atan(d), s21_atan(d), 1e-6);