#include "s21_matrix.h"

int total = OK;

#test create_remove_test
  matrix_t a = {0};
  ck_assert(s21_create_matrix(3, 5, &a) == 0);
  s21_remove_matrix(&a);
  ck_assert(s21_create_matrix(0, 3, &a) == 1);
  s21_remove_matrix(&a);
  ck_assert(s21_create_matrix(1, 1, &a) == 0);
  s21_remove_matrix(&a);
  ck_assert(s21_create_matrix(1, -2, &a) == 1);
  s21_remove_matrix(&a);

#test eq_test
  matrix_t a = {0}, b = {0};
  s21_create_matrix(1, 1, &a);
  s21_create_matrix(1, 1, &b);
  a.matrix[0][0] = 0.00000145;
  b.matrix[0][0] = 0.00000141;
  ck_assert_int_eq(FAILURE, s21_eq_matrix(&a, &b));
  a.matrix[0][0] = 0.00000149;
  b.matrix[0][0] = 0.00000146;
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&a, &b));
  a.matrix[0][0] = 0.0000014;
  b.matrix[0][0] = 0.00000144;
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&a, &b));
  a.matrix[0][0] = 99999999999.00000145;
  b.matrix[0][0] = 99999999999.00000147;
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&a, &b));
  a.matrix[0][0] = 99999999999e11;
  b.matrix[0][0] = 99999999999e11;
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&a, &b));
  a.matrix[0][0] = 99999993999e11;
  b.matrix[0][0] = 99999999999e11;
  ck_assert_int_eq(FAILURE, s21_eq_matrix(&a, &b));
  s21_remove_matrix(&a);
  s21_remove_matrix(&b);
  
#test sum_test
  matrix_t A = {0}, B = {0}, C = {0};
  total = s21_create_matrix(3, 2, &A);
  total = (total == OK) ? s21_create_matrix(3, 2, &B) : total;
  if (total == OK) {
    double array[] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0};
    s21_matrixArrayInit(&A, array, 6);
    s21_matrixArrayInit(&B, array, 6);
    total = s21_sum_matrix(&A, &B, &C);
    for (int i = 0; i < 6; i++) {
      ck_assert(A.matrix[0][i] == i + 1);
    }
    s21_remove_matrix(&C);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  ck_assert_int_eq(total, OK);

  total = s21_create_matrix(1, 1, &A);
  total = (total == OK) ? s21_create_matrix(1, 1, &B) : total;
  int num = 0;
  if (total == OK) {
    A.matrix[0][0] = 2;
    B.matrix[0][0] = 3;
    total =  s21_sum_matrix(&A, &B, &C);
    num = C.matrix[0][0];
  }
  
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);
  ck_assert_int_eq(num, 5);
  ck_assert_int_eq(total, OK);

  total = s21_create_matrix(1, 3, &A);
  total = (total == OK) ? s21_create_matrix(1, 4, &B) : total;
  if (total == OK) {
    total =  s21_sum_matrix(&A, &B, &C);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);
  ck_assert_int_eq(total, CALC_ERROR);

  total = s21_create_matrix(1, 3, &A);
  total = (total == OK) ? s21_create_matrix(1, 3, &B) : total;
  int equal = 0;  
  if (total == OK) {
    double a_arr[] = {0.11, 0.22, 0.33};
    double b_arr[] = {-0.12, 0.322, -0.3};
    s21_matrixArrayInit(&A, a_arr, 3);
    s21_matrixArrayInit(&B, b_arr, 3);
    total =  s21_sum_matrix(&A, &B, &C);

    matrix_t D = {0};
    total = (total == OK) ? s21_create_matrix(1, 3, &D) : total;
    if (total == OK) {
      double d_arr[] = {-0.01, 0.542, 0.03};
      s21_matrixArrayInit(&D, d_arr, 3);
      equal = s21_eq_matrix(&D, &C);
    }
    s21_remove_matrix(&D);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(equal, SUCCESS);

  total = s21_create_matrix(3, 1, &A);
  total = (total == OK) ? s21_create_matrix(3, 1, &B) : total;
  equal = 0;  
  if (total == OK) {
    double a_arr[] = {0.11, 0.22, 0.33};
    double b_arr[] = {-0.12, 0.322, -0.3};
    s21_matrixArrayInit(&A, a_arr, 3);
    s21_matrixArrayInit(&B, b_arr, 3);
    total =  s21_sum_matrix(&A, &B, &C);

    matrix_t D = {0};
    total = (total == OK) ? s21_create_matrix(3, 1, &D) : total;
    if (total == OK) {
      double d_arr[] = {-0.01, 0.542, 0.03};
      s21_matrixArrayInit(&D, d_arr, 3);
      equal =  s21_eq_matrix(&D, &C);
    }
    s21_remove_matrix(&D);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(equal, SUCCESS);


#test random_sum_sub
  matrix_t a = {0}, b = {0}, sum = {0}, sub = {0};
  matrix_t sum_c = {0}, sub_c = {0};
  int n = 5;
  total = s21_create_matrix(n, n, &a);
  total = (total == OK) ? s21_create_matrix(n, n, &b) : 0;
  total = (total == OK) ? s21_create_matrix(n, n, &sum_c) : 0;
  total = (total == OK) ? s21_create_matrix(n, n, &sub_c) : 0;
  for (int i = 0; total == OK && i < n; i++) {
    for (int j = 0; j < n; j++) {
      a.matrix[i][j] = getRandVal();
      b.matrix[i][j] = getRandVal();
      sum_c.matrix[i][j] = a.matrix[i][j] + b.matrix[i][j];
      sub_c.matrix[i][j] = a.matrix[i][j] - b.matrix[i][j];
    }
  }
  int res_1 = 3, res_2 = 3;
  if (total == OK) {
    s21_sum_matrix(&a, &b, &sum);
    s21_sub_matrix(&a, &b, &sub);
    res_1 = s21_eq_matrix(&sum, &sum_c);
    res_2 = s21_eq_matrix(&sub, &sub_c);
    s21_remove_matrix(&sum);
    s21_remove_matrix(&sub);
  }
  s21_remove_matrix(&a);
  s21_remove_matrix(&b);
  s21_remove_matrix(&sum_c);
  s21_remove_matrix(&sub_c);
  ck_assert(res_1 == SUCCESS && res_2 == SUCCESS);

#test determ_test
  matrix_t A = {0};
  int n = 3;
  total = s21_create_matrix(n, n, &A);
  double det = 0;
  if (total == OK) {
    double array1[] = {11.0, 32.0, 3.0, 4.0, 10.0, 6.0, 7.532, 8.38, 9.0};
    s21_matrixArrayInit(&A, array1, n * n);

    total = s21_determinant(&A, &det);
    if (total == OK) {
      ck_assert_double_eq(det, 605.664);
    }
  }
  s21_remove_matrix(&A);

  n = 4;
  s21_create_matrix(n, n, &A);
  double array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
  s21_matrixArrayInit(&A, array2, n * n);
  ck_assert_int_eq(OK, s21_determinant(&A, &det));
  ck_assert(0 == det);
  s21_remove_matrix(&A);

#test mult_mat
  matrix_t A = {0}, B = {0}, C = {0};
  total = s21_create_matrix(2, 3, &A);
  total = (total == OK) ? s21_create_matrix(2, 2, &B) : total;
  if (total == OK) {
    total = s21_mult_matrix(&A, &B, &C);
    s21_remove_matrix(&C);
  }  
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  ck_assert_int_eq(total, CALC_ERROR);

  total = s21_create_matrix(1, 1, &A);
  total =  (total == OK) ? s21_create_matrix(1, 1, &B) : total;

  if (total == OK) {
    A.matrix[0][0] = -5;
    B.matrix[0][0] = 1;
    ck_assert_int_eq(OK, s21_mult_matrix(&A, &B, &C));
    ck_assert_int_eq(C.matrix[0][0], -5);
    s21_remove_matrix(&C);
  }

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);

  total = s21_create_matrix(1, 3, &A);
  total = (total == OK) ? s21_create_matrix(1, 4, &B) : total;
  if (total == OK) {
    total =  s21_mult_matrix(&A, &B, &C);
    s21_remove_matrix(&C);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  ck_assert_int_eq(total, CALC_ERROR);


  total = s21_create_matrix(1, 3, &A);
  total = (total == OK) ? s21_create_matrix(1, 3, &B) : total;
  int equal = 0;  
  if (total == OK) {
    double a_arr[] = {0.11, 0.22, 0.33};
    double b_arr[] = {-0.1, 0.3, -1};
    s21_matrixArrayInit(&A, a_arr, 3);
    s21_matrixArrayInit(&B, b_arr, 3);
    total =  s21_mult_matrix(&A, &B, &C);
    s21_remove_matrix(&C);

    matrix_t D = {0};
    total = (total == OK) ? s21_create_matrix(1, 3, &D) : total;
    s21_remove_matrix(&D);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  ck_assert_int_eq(total, CALC_ERROR);
  ck_assert_int_eq(equal, FAILURE);

  total = s21_create_matrix(3, 1, &A);
  total = (total == OK) ? s21_create_matrix(1, 1, &B) : total;
  equal = 0;  
  if (total == OK) {
    double a_arr[] = {0.11, 0.22, -33};
    double b_arr[] = {-0.1};
    s21_matrixArrayInit(&A, a_arr, 3);
    s21_matrixArrayInit(&B, b_arr, 3);
    total =  s21_mult_matrix(&A, &B, &C);

    matrix_t D = {0};
    total = (total == OK) ? s21_create_matrix(3, 1, &D) : total;
    if (total == OK) {
      double d_arr[] = {-0.011, -0.022, 3.3};
      s21_matrixArrayInit(&D, d_arr, 3);
      equal =  s21_eq_matrix(&D, &C);
    }
    s21_remove_matrix(&C);
    s21_remove_matrix(&D);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(equal, SUCCESS);

  total = s21_create_matrix(1, 1, &A);
  total = (total == OK) ? s21_create_matrix(1, 1, &B) : total;
  equal = 0;  
  if (total == OK) {
    double a_arr[] = {-33};
    double b_arr[] = {-0.1};
    s21_matrixArrayInit(&A, a_arr, 1);
    s21_matrixArrayInit(&B, b_arr, 1);
    total =  s21_mult_matrix(&A, &B, &C);

    matrix_t D = {0};
    total = (total == OK) ? s21_create_matrix(1, 1, &D) : total;
    if (total == OK) {
      double d_arr[] = {3.3};
      s21_matrixArrayInit(&D, d_arr, 1);
      equal =  s21_eq_matrix(&D, &C);
    }
    s21_remove_matrix(&C);
    s21_remove_matrix(&D);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(equal, SUCCESS);

  total = s21_create_matrix(1, 3, &A);
  total = (total == OK) ? s21_create_matrix(3, 1, &B) : total;
  equal = 0;  
  if (total == OK) {
    double a_arr[] = {-1, 2, 3};
    double b_arr[] = {2, 2, 0.5};
    s21_matrixArrayInit(&A, a_arr, 3);
    s21_matrixArrayInit(&B, b_arr, 3);
    total =  s21_mult_matrix(&A, &B, &C);

    matrix_t D = {0};
    total = (total == OK) ? s21_create_matrix(1, 1, &D) : total;
    if (total == OK) {
      double d_arr[] = {3.5};
      s21_matrixArrayInit(&D, d_arr, 1);
      equal =  s21_eq_matrix(&D, &C);
    }
    s21_remove_matrix(&C);
    s21_remove_matrix(&D);
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(equal, SUCCESS);

  total = s21_create_matrix(4, 4, &A);
  total = (total == OK) ? s21_create_matrix(4, 4, &B) : total;
  equal = 0;  
  if (total == OK) {
    double a_arr[] = {4.11, 0.22, 0.03, 10.33,
                      0.22, 3.11, 0.4, 1.3,
                      1.02, 0.2, 2.53, 1.23,
                      5.3, 0.04, 3, 4.43};
    double b_arr[] = {0.1, 0.2, 0.3, 33,
                      0.22, 0.1, 0.44, 3.33, 
                      1.22, 0.32, 0.53, 1.23, 
                      54.3, 0.04, 0, 4.43};
    s21_matrixArrayInit(&A, a_arr, 16);
    s21_matrixArrayInit(&B, b_arr, 16);
    total =  s21_mult_matrix(&A, &B, &C);

    matrix_t D = {0};
    total = (total == OK) ? s21_create_matrix(4, 4, &D) : total;
    if (total == OK) {
      double d_arr[] = {561.415,  1.2668,  1.3457,  182.1614, 71.7842, 0.535,
                        1.6464,   23.8673, 70.0216, 1.0828,   1.7349,  42.8868,
                        244.7478, 2.2012,  3.1976,  198.3481};
      s21_matrixArrayInit(&D, d_arr, 16);
      equal =  s21_eq_matrix(&D, &C);
      s21_remove_matrix(&C);
      s21_remove_matrix(&D);
    }
  }
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(equal, SUCCESS);

#test mul_num_test
  matrix_t A = {0}, B = {0}, C = {0};
  double num = 1.234567;
  total = s21_create_matrix(4, 4, &A);
  int eq = 0;
  if (total == OK) {
    double a_arr[] = {561.415, 1.2668,  1.3457,  182.161, 71.7842, 0.535,
                      1.6464,  23.8673, 70.0216, 1.0828,  1.7349,  42.8868,
                      244.748, 2.2012,  3.1976,  198.348};
    s21_matrixArrayInit(&A, a_arr, 16);
    total = s21_mult_number(&A, num, &B);
    total = (total == OK) ? s21_create_matrix(4, 4, &C) : 0;
    if (total == OK) {
      double c_arr[] = {693.1044323, 1.5639495, 1.6613568, 224.8899593,
                        88.6224044,  0.6604933, 2.0325911, 29.465781,
                        86.4463566,  1.3367891, 2.1418503, 52.946628,
                        302.1578041, 2.7175289, 3.9476514, 244.8738953};
      s21_matrixArrayInit(&C, c_arr, 16);
      eq = s21_eq_matrix(&B, &C);
      s21_remove_matrix(&B);
      s21_remove_matrix(&C);
    }
  }
  s21_remove_matrix(&A);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(eq, SUCCESS);

#test complements_test
  matrix_t A = {0}, B = {0};
  total = s21_create_matrix(1, 1, &A);
  int res = 0;
  if (total == OK) {
    A.matrix[0][0] = 5;
    total = s21_calc_complements(&A, &B);
    res = B.matrix[0][0];
    s21_remove_matrix(&B);
  }
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(res, 1);
  s21_remove_matrix(&A);

  total = s21_create_matrix(2, 2, &A);
  if (total == OK) {
    double array[] = {1, 2, 3, 4};
    s21_matrixArrayInit(&A, array, 4);
    total = s21_calc_complements(&A, &B);
    res = B.matrix[0][0] == 4 && B.matrix[0][1] == -3  && \
              B.matrix[1][0] == -2 && B.matrix[1][1] == 1;
    s21_remove_matrix(&B);
  }
  s21_remove_matrix(&A);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(res, 1);

#test inverse_test
  matrix_t A = {0}, B = {0}, C = {0};
  total = s21_create_matrix(1, 1, &A);
  int res = 0;
  if (total == OK) {
    A.matrix[0][0] = 5;
    total = s21_inverse_matrix(&A, &B);
    res = B.matrix[0][0];
    s21_remove_matrix(&B);

  }
  s21_remove_matrix(&A);
  ck_assert_int_eq(total, OK);
  ck_assert_int_eq(res, 0.2);

  int eq = 0;
  total = s21_create_matrix(3, 3, &A);
  if (total == OK) {
    double array[] = {9.1, 2.34, 33.10, 34.0, 59.240, 468.0, 2.10, 1.234, 7.77};
    s21_matrixArrayInit(&A, array, 9);
    total = s21_inverse_matrix(&A, &B);
    total = (total == OK) ? s21_create_matrix(3, 3, &C) : total;
    if (total == OK) {
      double array2[] = {0.0554445,  -0.01072,     0.4094933,
                         -0.3399121, -0.000566189, 1.4821195,
                         0.0389985,  0.00298723,   -0.217358};
      s21_matrixArrayInit(&C, array2, 9);
      eq = s21_eq_matrix(&B, &C);
      s21_remove_matrix(&B);
      s21_remove_matrix(&C);
    }
  }
  s21_remove_matrix(&A);
  ck_assert(total == OK);
  ck_assert(eq == SUCCESS);

  int n = 3;
  total = s21_create_matrix(n, n, &A);
  if (total == OK) {
    double array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    s21_matrixArrayInit(&A, array2, n * n);
    total = s21_inverse_matrix(&A, &B);
    s21_remove_matrix(&B);
  }
  s21_remove_matrix(&A);
  ck_assert(total == CALC_ERROR);

#test test_secondary
  matrix_t a;
  double arr[] = {1, 2, 3, 4};
  total = s21_create_matrix(2, 2, &a);
  int res = 0;
  s21_printMatrix(a);
  if (total == OK) {
    res = s21_matrixArrayInit(&a, arr, 3);
  }
  s21_remove_matrix(&a);
  ck_assert(res == 1);

  int temp2[6][3] = {{1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1}};
  int** temp = malloc(sizeof(double*) * 6 + sizeof(double) * 18);
  if (temp) {
    int* start = (int*)(temp + 6);
    for (int i = 0; i < 6; i++) {
      temp[i] = start + i * 3;
      for (int j = 0; j < 3; j++) {
        temp[i][j] = temp2[i][j];
      }
    }
  }
  s21_checkUnique(temp, 6, 3);
  free(temp);



  

